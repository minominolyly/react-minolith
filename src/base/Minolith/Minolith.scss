@use "sass:string";
@forward "../../../node_modules/minolith/src/css-variables/index.scss";
@forward "../../../node_modules/minolith/src/base/normalize.scss";
@forward "../../../node_modules/minolith/src/utilities/decoration.scss";
@use "../../../node_modules/minolith/src/mixins/index.scss" as mixins;
@use "../../../node_modules/minolith/src/variables/index.scss" as variables;

.translate-middle-x {
  transform: translateX(-50%) !important;
}
.translate-middle-y {
  transform: translateY(-50%) !important;
}
.translate-middle {
  transform: translate(-50%, -50%) !important;
}

@mixin aspect-ratio-base() {
  contain: strict;
  width: 100%;
  height: auto;
}
.aspect-ratio-square {
  @include aspect-ratio-base();
  aspect-ratio: 1 / 1;
}
.aspect-ratio-paper-landscape {
  @include aspect-ratio-base();
  aspect-ratio: 1.414 / 1;
}
.aspect-ratio-paper-portrait {
  @include aspect-ratio-base();
  aspect-ratio: 1 / 1.414;
}
.aspect-ratio-trading-card-small-landscape {
  @include aspect-ratio-base();
  aspect-ratio: 86 / 59;
}
.aspect-ratio-trading-card-small-portrait {
  @include aspect-ratio-base();
  aspect-ratio: 59 / 86;
}
.aspect-ratio-trading-card-standard-landscape {
  @include aspect-ratio-base();
  aspect-ratio: 88 / 63;
}
.aspect-ratio-trading-card-standard-portrait {
  @include aspect-ratio-base();
  aspect-ratio: 63 / 88;
}
.aspect-ratio-trading-card-arcade-landscape {
  @include aspect-ratio-base();
  aspect-ratio: 81 / 58;
}
.aspect-ratio-trading-card-arcade-portrait {
  @include aspect-ratio-base();
  aspect-ratio: 58 / 81;
}
.aspect-ratio-2-3 {
  @include aspect-ratio-base();
  aspect-ratio: 2 / 3;
}
.aspect-ratio-3-2 {
  @include aspect-ratio-base();
  aspect-ratio: 3 / 2;
}
.aspect-ratio-3-4 {
  @include aspect-ratio-base();
  aspect-ratio: 3 / 4;
}
.aspect-ratio-4-3 {
  @include aspect-ratio-base();
  aspect-ratio: 4 / 3;
}
.aspect-ratio-4-5 {
  @include aspect-ratio-base();
  aspect-ratio: 4 / 5;
}
.aspect-ratio-5-4 {
  @include aspect-ratio-base();
  aspect-ratio: 5 / 4;
}
.aspect-ratio-5-8 {
  @include aspect-ratio-base();
  aspect-ratio: 5 / 8;
}
.aspect-ratio-8-5 {
  @include aspect-ratio-base();
  aspect-ratio: 8 / 5;
}
.aspect-ratio-9-16 {
  @include aspect-ratio-base();
  aspect-ratio: 9 / 16;
}
.aspect-ratio-16-9 {
  @include aspect-ratio-base();
  aspect-ratio: 16 / 9;
}

@mixin forecolorRainbow($numStr) {
  background-clip: text !important;
  background-image: linear-gradient(
    135deg,
    var(--#{variables.$prefix}color-red-#{$numStr}),
    var(--#{variables.$prefix}color-coral-#{$numStr}),
    var(--#{variables.$prefix}color-orange-#{$numStr}),
    var(--#{variables.$prefix}color-yellow-#{$numStr}),
    var(--#{variables.$prefix}color-lime-#{$numStr}),
    var(--#{variables.$prefix}color-green-#{$numStr}),
    var(--#{variables.$prefix}color-cyan-#{$numStr}),
    var(--#{variables.$prefix}color-blue-#{$numStr}),
    var(--#{variables.$prefix}color-violet-#{$numStr}),
    var(--#{variables.$prefix}color-magenta-#{$numStr})
  ) !important;
  color: transparent !important;
}

@mixin backcolorRainbow($numStr) {
  background-image: linear-gradient(
    135deg,
    var(--#{variables.$prefix}color-red-#{$numStr}),
    var(--#{variables.$prefix}color-coral-#{$numStr}),
    var(--#{variables.$prefix}color-orange-#{$numStr}),
    var(--#{variables.$prefix}color-yellow-#{$numStr}),
    var(--#{variables.$prefix}color-lime-#{$numStr}),
    var(--#{variables.$prefix}color-green-#{$numStr}),
    var(--#{variables.$prefix}color-cyan-#{$numStr}),
    var(--#{variables.$prefix}color-blue-#{$numStr}),
    var(--#{variables.$prefix}color-violet-#{$numStr}),
    var(--#{variables.$prefix}color-magenta-#{$numStr})
  ) !important;
}

//#region rainbow

@mixin colorUtilities($colorScheme: "") {
  $derived: "";
  @if $colorScheme != "" {
    $derived: "-#{$colorScheme}";
  }

  $numStr: "00";
  @for $p from 1 through 19 {
    $numStr: "#{($p * 5)}";
    @if (string.length($numStr) == 1) {
      $numStr: "0" + $numStr;
    }

    //#region forecolor
    .forecolor#{$derived}-rainbow-#{$numStr} {
      @include forecolorRainbow($numStr);
    }
    .forecolor#{$derived}-hover-rainbow-#{$numStr} {
      &:hover {
        @include forecolorRainbow($numStr);
      }
    }
    .forecolor#{$derived}-rainbow-focus-#{$numStr} {
      &:focus {
        @include forecolorRainbow($numStr);
      }
    }
    .forecolor#{$derived}-rainbow-active-#{$numStr} {
      &:active {
        @include forecolorRainbow($numStr);
      }
    }
    .forecolor#{$derived}-rainbow-disabled-#{$numStr} {
      &[disabled],
      fieldset[disabled] {
        @include forecolorRainbow($numStr);
      }
    }
    //#endregion forecolor

    //#region backcolor
    .backcolor#{$derived}-rainbow-#{$numStr} {
      @include backcolorRainbow($numStr);
    }
    .backcolor#{$derived}-hover-rainbow-#{$numStr} {
      &:hover {
        @include backcolorRainbow($numStr);
      }
    }
    .backcolor#{$derived}-rainbow-focus-#{$numStr} {
      &:focus {
        @include backcolorRainbow($numStr);
      }
    }
    .backcolor#{$derived}-rainbow-active-#{$numStr} {
      &:active {
        @include backcolorRainbow($numStr);
      }
    }
    .backcolor#{$derived}-rainbow-disabled-#{$numStr} {
      &[disabled],
      fieldset[disabled] {
        @include backcolorRainbow($numStr);
      }
    }
    //#endregion backcolor

    // NOTE: bordercolor is not available

    // NOTE: highlighter is not available
  }
  //#endregion rainbow
}

@include colorUtilities();

@include mixins.setColorScheme("light") {
  @include colorUtilities("light");
}

@include mixins.setColorScheme("dark") {
  @include colorUtilities("dark");
}
